{"version":3,"sources":["PathFindingVisualizer/Node/Node.jsx","Algorithm/pathfindingAlgorithms.js","PathFindingVisualizer/PathFindingVisualizer.jsx","SortingVisualizer/Pile/Pile.jsx","Algorithm/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","AIVisualizer/Perceptron/Perceptron.js","AIVisualizer/Perceptron/PtronVisualizer.jsx","AIVisualizer/PongVisualizer/PongAgent.js","AIVisualizer/PongVisualizer/PongVisualizer.jsx","AIVisualizer/ConnectFourVisualizer/MinimaxAgent.js","AIVisualizer/ConnectFourVisualizer/ConnectFour.jsx","AIVisualizer/NNSnakeVisualizer/SnakeNode/SnakeNode.jsx","AIVisualizer/NNSnakeVisualizer/NNSnakeVisualizer.jsx","AIVisualizer/AIVisualizer.jsx","Visualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","Component","render","row","col","isFinish","isStart","onMouseDown","onMouseEnter","onMouseUp","isWall","this","props","extraClassName","React","createElement","id","concat","className","dijkstra","grid","start","finish","visitedInOrder","distance","unvisited","allNodes","length","sort","a","b","closest","shift","Infinity","isVisited","push","updateUnvisitedNeighbors","DFS","node","pop","getUNeighbors","BFS","neighbors","reN","index","neighbor","previousNode","AStar","heuristic","cur","updateUnvisitedNeighborsStar","manhattanDistance","ar","ac","br","bc","Math","abs","re","randomSelect","path","min","max","floor","random","getNeighbors","visited","points","height","width","pRe","validate","slice","connected","unconnected","forEach","nr","nc","ir","ic","c","u","connect","makeWall","isW","newNode","PathFindingVisualizer","constructor","super","state","FR","FC","mouseIsPressed","changingStart","changingFinish","visualized","rendering","numRow","numCol","SR","SC","speed","delays","currentAlgorithm","algorithms","pathfindingAlgorithms","visualizePathfinding","bind","clearVisualizer","setAlgorithm","getFunctions","algoId","setState","isRendering","componentDidMount","initializeGrid","clearWall","currentRow","element","document","getElementById","createNode","handleMouseDown","updateGridWithWall","clearVisitedAndPath","handleMouseEnter","newFinish","newStart","handleMouseUp","setVisualizerRendering","g","shortedPath","unshift","getShortestPath","i","setTimeout","n","console","log","setSpeed","Fragment","map","rowId","key","nodeId","class","style","marginTop","type","disabled","data-toggle","aria-haspopup","aria-expanded","marginRight","aria-labelledby","onClick","j","splice","rn","primMaze","marginLeft","Pile","val","isChanging","isPivot","finished","size","colorSetIndex","changingColors","offSet","normalColors","color","lineOff","indicatorLength","background","position","display","x1","y1","x2","y2","stroke","strokeWidth","swap","piles","tempVal","selectionSort","statesInOrder","minId","temp","changing","bubbleSort","newN","insertionSort","mergeSort","mergeSortHelper","end","mid","k","pilesC","merge","quickSort","quickSortHelper","pivot","partition","SortingVisualizer","numPiles","maxPile","changingPiles","pileDelayTimes","DelayTimesSizeBased","getRandomInt","descriptions","unsortedPiles","sortingAlgorithms","randomizePiles","visualizeSorting","initializePiles","setSize","s","sizes","nSquare","nLogn","pile","pileId","dummy","indexOf","range","Perceptron","alpha","weights","Array","train","inputs","desired","error","feedforward","sum","activate","getWeights","PtronVisualizer","training","count","ptron","xOff","yOff","M","B","resetVisualizer","startVisualizer","f","x","as","ae","bs","be","initialize","y","answer","input","output","xx1","yy1","xx2","yy2","guess","fill","textComponet","aM","aB","eM","eB","Text","text","fontFamily","fontSize","circles","point","pointId","Circle","radius","opacity","all","Stage","Layer","name","ref","layer","Line","ax","ay","bx","by","sqrt","PongAgent","discount","epsilon","featureList","getMove","action","minDisToDot","dots","minDis","dot","d","getFeatures","px","vx","vy","terminal","features","getQ","result","feature","update","nextState","reward","diff","getValue","setWeights","actions","getAction","curActions","p","getPolicy","reAction","maxQ","PongVisualizer","r","ballSpeed","panelx","panely","panelSpeed","ballInitialized","framecount","score","pressedLeft","pressedRight","gameCount","agent","notStarted","ox","randomInt","ovx","ovy","storedWeights","getState","updatePanel","movePanel","updateBall","updateDots","Rect","goMouseEnter","onMouseLeave","w1","w2","w3","curScore","curGameCount","isNaN","dotId","MinimaxAgent","depth","humanPlayer","aiPiece","humanPiece","getActions","board","maxVal","maxValAction","boardCopy","minimax","tryMove","colId","newCol","reverse","four","tar","each","scoreFour","count1","countN","count2","pow","getScore","isMax","beta","checkWinner","Piece","Col","handleClick","handleEnter","handleLeave","pieces","ConnectFour","currentPlayer","aiPlayer","lastBoards","colors","winner","minimaxAgent","reset","undo","setStartingPlayer","player","setDepth","move","AITakeMove","componentDidUpdate","buttons","cols","loadingImg","src","zIndex","alt","textAlign","checkFour","SnakeNode","NNSnakeVisualizer","numRows","numCols","snake","direction","dr","dc","foodPos","foodScore","randomFood","randomRow","randomCol","setFoodClassName","nextFood","line","showSnake","food","lastNode","updateSnake","checkFoodEaten","num","AIVisualizer","visualizeAI","getAIFunctions","newScript","run","url","script","body","appendChild","renderObj","Visualizer","mode","goFunction","resetFunction","sortingClicked","pathClicked","AIClicked","aicount","changeRenderingState","go","setAlgo","TextLoop","interval","springConfig","stiffness","adjustingSpeed","href","data-target","invisibleOrNot","algorithm","role","data-dismiss","App","charset","content","rel","integrity","crossorigin","BrowserRouter","basename","Boolean","window","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2b6840db.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './Node.css';\n\nexport default class Node extends Component {\n    render() {\n        const {\n            row,\n            col,\n            isFinish,\n            isStart,\n            onMouseDown,\n            onMouseEnter,\n            onMouseUp,\n            isWall,\n        } = this.props;\n        const extraClassName = isFinish\n            ? 'node-finish'\n            : isStart\n                ? 'node-start'\n                : isWall\n                    ? 'node-wall'\n                    : '';\n        return (\n            <div\n                id={`node-${row}-${col}`}\n                className={`node ${extraClassName}`}\n                onMouseDown={() => onMouseDown(row, col)}\n                onMouseEnter={() => onMouseEnter(row, col)}\n                onMouseUp={() => onMouseUp()}>\n            </div>\n        );\n    }\n}","\nfunction dijkstra(grid, start, finish) {\n    const visitedInOrder = [];\n    start.distance = 0;\n    const unvisited = allNodes(grid);\n    while (unvisited.length) {\n        sortNodes(unvisited);\n        const closest = unvisited.shift();\n        if (closest === finish) {\n            return visitedInOrder;\n        }\n        if (closest.isWall) continue;\n        if (closest.distance === Infinity) return visitedInOrder;\n        closest.isVisited = true;\n        visitedInOrder.push(closest);\n\n        updateUnvisitedNeighbors(closest, grid);\n    }\n    return visitedInOrder;\n}\n\nfunction DFS(grid, start, finish) {\n    const visitedInOrder = [];\n    let unvisited = [];\n    unvisited.push(start);\n    while (unvisited.length) {\n        const node = unvisited.pop();\n        if (node === finish) {\n            return visitedInOrder;\n        }\n        if (node.isWall) continue;\n        node.isVisited = true;\n        visitedInOrder.push(node);\n\n        unvisited = unvisited.concat(getUNeighbors(node, grid));\n    }\n\n    return visitedInOrder;\n}\n\nfunction BFS(grid, start, finish) {\n    const visitedInOrder = [];\n    let unvisited = [];\n    unvisited.push(start);\n    while (unvisited.length) {\n        const node = unvisited.shift();\n        if (node === finish) {\n            return visitedInOrder;\n        }\n        if (node.isWall) continue;\n        node.isVisited = true;\n        visitedInOrder.push(node);\n\n        unvisited = unvisited.concat(getUNeighbors(node, grid));\n    }\n\n    return visitedInOrder;\n}\n\nfunction getUNeighbors(node, grid) {\n    const neighbors = [];\n    const reN = [];\n    const { row, col } = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n\n    for (let index = 0; index < neighbors.length; index++) {\n        const neighbor = neighbors[index];\n        if (!neighbor.isVisited) {\n            neighbor.previousNode = node;\n            neighbor.isVisited = true;\n            reN.push(neighbor);\n        }\n    }\n    return reN;\n\n}\n\nfunction AStar(grid, start, finish) {\n    const visitedInOrder = [];\n    start.distance = 0;\n    start.heuristic = 0;\n    const unvisited = allNodes(grid);\n    while (unvisited.length) {\n        sortNodesStar(unvisited);\n        const cur = unvisited.shift();\n        if (cur === finish) {\n            return visitedInOrder;\n        }\n        if (cur.isWall) continue;\n        if (cur.distance + cur.heuristic === Infinity) return visitedInOrder;\n        cur.isVisited = true;\n        visitedInOrder.push(cur);\n\n        updateUnvisitedNeighborsStar(cur, grid, finish);\n    }\n    return visitedInOrder;\n}\n\nfunction updateUnvisitedNeighborsStar(cur, grid, finish) {\n    const neighbors = [];\n    const { row, col } = cur;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    for (const neighbor of neighbors) {\n        if (!neighbor.isVisited) {\n            neighbor.distance = cur.distance + 1;\n            neighbor.heuristic = manhattanDistance(neighbor, finish);\n            neighbor.previousNode = cur;\n        }\n    }\n}\n\nfunction manhattanDistance(a, b) {\n    let { row: ar, col: ac } = a;\n    let { row: br, col: bc } = b;\n    return Math.abs(ar - br) + Math.abs(ac - bc);\n}\n\nfunction allNodes(grid) {\n    const re = [];\n    for (const row of grid) {\n        for (const node of row) {\n            re.push(node);\n        }\n    }\n    return re;\n}\n\nfunction sortNodesStar(nodes) {\n    nodes.sort((a, b) => (a.distance + a.heuristic) - (b.distance + b.heuristic));\n}\n\n\nfunction sortNodes(nodes) {\n    nodes.sort((a, b) => a.distance - b.distance);\n}\n\nfunction updateUnvisitedNeighbors(closest, grid) {\n    const neighbors = [];\n    const { row, col } = closest;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    for (const neighbor of neighbors) {\n        if (!neighbor.isVisited) {\n            neighbor.distance = closest.distance + 1;\n            neighbor.previousNode = closest;\n        }\n    }\n}\n\nfunction getShortestPath(finish) {\n    const path = [];\n    let cur = finish;\n    while (cur !== null) {\n        path.unshift(cur);\n        cur = cur.previousNode;\n    }\n    return path;\n}\n\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction primMaze(grid) {\n    let sr = 7, sc = 17; // set a starting point for generating maze\n    let height = grid.length, width = grid[0].length;\n    for (let i = 0; i < height; i++) {\n        for (let j = 0; j < width; j++) {\n            makeWall(grid, i, j, false);\n        }\n\n    }\n    for (let i = 0; i < height; i++) {\n        for (let j = i % 2 + 1; j < width; j += i % 2 + 1) {\n            makeWall(grid, i, j, true);\n        }\n    }\n    for (let i = 0; i < height; i++) {\n        makeWall(grid, i, 0, true);\n    }\n    let visited = [];\n    let path = [{ row: sr, col: sc }];\n    while (path.length > 0) {\n        const index = randomSelect(path);\n        const node = path[index];\n        path.splice(index, 1);\n        visited = visited.concat([node]);\n        const { c: connected, u: unconnected } = getNeighbors(grid, visited, node);\n        if (connected.length > 0) {\n            let rn = randomSelect(connected);\n            connect(grid, node, connected[rn]);\n            connected.splice(rn);\n        }\n        path = path.concat(unconnected);\n\n    }\n}\n\nfunction randomSelect(path) {\n    return randomInt(0, path.length - 1);\n}\n\nfunction validate(grid, points) {\n    let height = grid.length, width = grid[0].length;\n    let pRe = [];\n    for (let index = 0; index < points.length; index++) {\n        let { row, col } = points[index];\n        if ((0 <= row && row < height && 0 <= col && col < width)) {\n            pRe.push(points[index]);\n        }\n    }\n    return pRe;\n\n}\n\nfunction isVisited(visited, node) {\n    let { row: nr, col: nc } = node;\n    for (let index = 0; index < visited.length; index++) {\n        let { row: ir, col: ic } = visited[index];\n        if (nr === ir && nc === ic) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction getNeighbors(grid, visited, node) {\n    let { row, col } = node;\n    let neighbors = [{ row: row + 2, col: col }, { row: row - 2, col: col }, { row: row, col: col + 2 }, { row: row, col: col - 2 }];\n    neighbors = validate(grid, neighbors.slice());\n    let connected = [];\n    let unconnected = [];\n    neighbors.forEach(neighbor => {\n        if (isVisited(visited, neighbor)) {\n            connected.push(neighbor);\n        }\n        else {\n            unconnected.push(neighbor);\n        }\n    });\n    return { c: connected, u: unconnected };\n}\n\nfunction connect(grid, a, b) {\n    let { row: ar, col: ac } = a;\n    let { row: br, col: bc } = b;\n    let row = (ar + br) / 2;\n    let col = (ac + bc) / 2;\n    makeWall(grid, row, col, false);\n}\n\nfunction makeWall(grid, row, col, isW) {\n    const node = grid[row][col];\n    const newNode = {\n        ...node,\n        isWall: isW,\n    }\n    grid[row][col] = newNode;\n}\n\nexport { dijkstra, BFS, DFS, AStar, getShortestPath, primMaze };","import React, { Component } from 'react';\nimport Node from './Node/Node';\nimport { dijkstra, BFS, DFS, AStar, getShortestPath, primMaze } from '../Algorithm/pathfindingAlgorithms';\nimport './PathFindingVisualizer.css';\n\nexport default class PathFindingVisualizer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            grid: [],\n            FR: 7,\n            FC: 31,\n            mouseIsPressed: false,\n            changingStart: false,\n            changingFinish: false,\n            visualized: false,\n            rendering: false,\n            numRow: 17,\n            numCol: 37,\n            SR: 7,\n            SC: 5,\n            speed: 'median',\n            delays: {'slow': 17, 'median': 7, 'fast': 3},\n            currentAlgorithm: -1,\n            algorithms: ['BFS', 'Dijkstra', 'A Star', 'DFS'],\n            pathfindingAlgorithms: [BFS, dijkstra, AStar, DFS]\n        };\n        this.visualizePathfinding = this.visualizePathfinding.bind(this);\n        this.clearVisualizer = this.clearVisualizer.bind(this);\n        this.setAlgorithm = this.setAlgorithm.bind(this);\n        this.props.getFunctions(this.visualizePathfinding, this.clearVisualizer, this.setAlgorithm, this.state.algorithms);\n    }\n\n    setAlgorithm(algoId) {\n        this.setState({ currentAlgorithm: algoId });\n    }\n\n    isRendering() {\n        return this.state.rendering;\n    }\n\n    componentDidMount() {\n        const grid = this.initializeGrid(false);\n        this.setState({\n            grid: grid,\n            currentAlgorithm: -1\n        })\n        this.state.grid = grid;\n    }\n\n    initializeGrid(clearWall) {\n        const grid = [];\n        for (let row = 0; row < this.state.numRow; row++) {\n            const currentRow = [];\n            for (let col = 0; col < this.state.numCol; col++) {\n                let isW = false;\n                const element = document.getElementById(`node-${row}-${col}`);\n                if (element && (element.className === 'node node-path' || element.className === 'node node-visited')) {\n                    element.className = 'node';\n                }\n                if (!clearWall && element && element.className === 'node node-wall') {\n                    isW = true;\n                }\n                currentRow.push(this.createNode(row, col, isW));\n            }\n            grid.push(currentRow);\n        }\n        return grid;\n    }\n\n    createNode(row, col, isW) {\n        return {\n            col,\n            row,\n            isStart: row === this.state.SR && col === this.state.SC,\n            isFinish: row === this.state.FR && col === this.state.FC,\n            distance: Infinity,\n            heuristic: Infinity,\n            isVisited: false,\n            isWall: isW,\n            previousNode: null,\n        };\n    }\n\n    handleMouseDown(row, col) {\n        if (row === this.state.SR && col === this.state.SC) {\n            this.setState({ changingStart: true });\n        }\n        else if (row === this.state.FR && col === this.state.FC) {\n            this.setState({ changingFinish: true });\n        }\n        else if (!this.state.rendering) {\n            this.updateGridWithWall(this.state.grid, row, col);\n            this.setState({ mouseIsPressed: true });\n            this.clearVisitedAndPath();\n        }\n    }\n\n    handleMouseEnter(row, col) {\n        if (this.state.mouseIsPressed) {\n            this.updateGridWithWall(this.state.grid, row, col);\n            this.setState({ mouseIsPressed: true });\n        }\n\n        else if (this.state.changingStart && !(row === this.state.FR && col === this.state.FC)) {\n            const start = document.getElementById(`node-${this.state.SR}-${this.state.SC}`);\n            if (start) {\n                start.className = 'node';\n                start.isStart = false;\n                this.state.grid[this.state.SR][this.state.SC].isStart = false;\n            }\n            const newStart = document.getElementById(`node-${row}-${col}`);\n            if (newStart) {\n                newStart.isStart = true;\n                newStart.className = 'node node-start';\n                this.state.grid[row][col].isStart = true;\n            }\n            this.setState({ SR: row, SC: col });\n            this.clearVisitedAndPath();\n\n        }\n        else if (this.state.changingFinish && !(row === this.state.SR && col === this.state.SC)) {\n            const finish = document.getElementById(`node-${this.state.FR}-${this.state.FC}`);\n            if (finish) {\n                finish.className = 'node';\n                finish.isFinish = false;\n                this.state.grid[this.state.FR][this.state.FC].isFinish = false;\n            }\n            const newFinish = document.getElementById(`node-${row}-${col}`);\n            if (newFinish) {\n                newFinish.isFinish = true;\n                newFinish.className = 'node node-finish';\n                this.state.grid[row][col].isFinish = true;\n            }\n            this.setState({ FR: row, FC: col });\n            this.clearVisitedAndPath();\n        }\n\n    }\n\n    handleMouseUp() {\n        this.setState({\n            changingStart: false,\n            changingFinish: false,\n            mouseIsPressed: false\n        });\n    }\n\n    updateGridWithWall(grid, row, col) {\n        const node = grid[row][col];\n        const newNode = {\n            ...node,\n            isWall: !node.isWall\n        }\n        grid[row][col] = newNode;\n    }\n\n    visualizePathfinding() {\n        if (this.state.currentAlgorithm === -1) return;\n        if (this.state.rendering) return;\n\n        this.setState({ visualized: true, rendering: true });\n        this.props.setVisualizerRendering(true);\n        let g = this.initializeGrid(false);\n        this.setState({\n            grid: g\n        });\n        this.state.grid = g;\n        const grid = this.state.grid;\n        const start = grid[this.state.SR][this.state.SC];\n        const finish = grid[this.state.FR][this.state.FC];\n        const visitedInOrder = this.state.pathfindingAlgorithms[this.state.currentAlgorithm](grid, start, finish);\n        const shortedPath = getShortestPath(finish);\n        for (let i = 0; i < visitedInOrder.length; i++) {\n            setTimeout(() => {\n                const node = visitedInOrder[i];\n                if (!node.isStart && !node.isFinish)\n                    document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n            }, this.state.delays[this.state.speed] * i);\n        }\n\n        for (let i = 0; i < shortedPath.length; i++) {\n            setTimeout(() => {\n                const node = shortedPath[i];\n                if (!node.isStart && !node.isFinish)\n                    document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-path';\n            }, this.state.delays[this.state.speed] * visitedInOrder.length + 50 * i);\n\n        }\n        setTimeout(() => {\n            this.setState({ rendering: false });\n            this.props.setVisualizerRendering(false);\n        }, this.state.delays[this.state.speed] * visitedInOrder.length + 50 * shortedPath.length);\n\n    }\n\n    clearVisualizer() {\n        if (!this.state.rendering)\n            this.setState({ grid: this.initializeGrid(true), visualized: false });\n\n    }\n\n    clearVisitedAndPath(){\n        for(let row = 0; row < this.state.numRow; row++){\n            for(let col = 0; col < this.state.numCol; col++){\n                let n = document.getElementById(`node-${row}-${col}`);\n                console.log(n);\n                if(n && (n.className === 'node node-visited' || n.className === 'node node-path')){\n                    n.className = 'node';\n                }\n            }\n        }\n    }\n\n    setSpeed(speed){\n        this.setState({speed: speed});\n    }\n\n    render() {\n\n        const grid = this.state.grid;\n\n        return (\n            <>\n                <div className=\"grid\">\n                    {grid.map((row, rowId) => {\n                        return (\n                            <div key={rowId}>\n                                {row.map((node, nodeId) => {\n                                    const { row, col, isFinish, isStart, isWall } = node;\n                                    return (\n                                        <Node\n                                            key={nodeId}\n                                            row={row}\n                                            col={col}\n                                            isStart={isStart}\n                                            isFinish={isFinish}\n                                            isWall={isWall}\n                                            mouseIsPressed={this.state.mouseIsPressed}\n                                            onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                                            onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\n                                            onMouseUp={() => this.handleMouseUp()}\n                                        ></Node>\n                                    )\n                                })\n                                }\n                            </div>\n                        );\n                    })\n                    }\n                </div>\n                <div class={\"dropdown\"} style={{marginTop: \"10px\"}}>\n                        <button class=\"btn btn-outline-dark dropdown-toggle\" type=\"button\" disabled={this.state.rendering} id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" style={{marginRight:\"5px\", height: \"30px\", width: \"150px\" }}>\n                            <p style={{ \"margin-top\": \"-5px\" }}>{`Speed: ${this.state.speed}`}</p>\n                        </button>\n                        <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n                            <li>\n                                <button type=\"button\" class=\"btn btn-light navbtn\" style={{height: \"30px\"}} onClick={() => this.setSpeed('slow')}><p style={{ \"margin-top\": \"-5px\" }}>{`slow`}</p></button>\n                                <button type=\"button\" class=\"btn btn-light navbtn\" style={{height: \"30px\"}} onClick={() => this.setSpeed('median')}><p style={{ \"margin-top\": \"-5px\" }}>{`median`}</p></button>\n                                <button type=\"button\" class=\"btn btn-light navbtn\" style={{height: \"30px\"}} onClick={() => this.setSpeed('fast')}><p style={{ \"margin-top\": \"-5px\" }}>{`fast`}</p></button>\n                            </li>\n                        </div>\n                        <button\n                        onClick={() => { \n                            primMaze(this.state.grid);\n                            this.setState({ finish: false});\n                            this.clearVisitedAndPath();\n                        }}\n                        type=\"button\" class=\"btn btn-outline-dark\"\n                        style={{marginLeft: \"5px\", \"height\": \"30px\"}}\n                        disabled={this.state.rendering}>\n                        <p style={{ \"margin-top\": \"-6px\" }}>generate maze</p>\n                        \n                    </button>\n                </div>\n            </>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './Pile.css';\n\nexport default class Pile extends Component {\n    render() {\n\n        const {\n            val,\n            isChanging,\n            isPivot,\n            finished,\n            index,\n            size,\n            colorSetIndex,\n            changingColors = [`rgb(228, 230, 120)`, `rgb(155, 147, 229)`, `rgb(248, 250, 140)`],\n            offSet = { 'small': 20, 'median': 0, 'large': 0 },\n            normalColors = [`rgb(200,${(1 - val / 45) * 255 + 50 + offSet[size]}, 255)`, `rgb(250,200, ${(1 - val / 80) * 255 + offSet[size]})`, `rgb( ${(1 - val / 80) * 255 + offSet[size]},200,250)`],\n        } = this.props;\n\n        let extraClassName = '';\n        if (isChanging) {\n            extraClassName = '-changing';\n        }\n        if (finished) {\n            extraClassName = '-finished';\n        }\n        let color = extraClassName === '-changing' ? changingColors[colorSetIndex] : normalColors[colorSetIndex];\n        if (!this.props.finished && this.props.isPivot) color = 'rgb(240, 190, 149)';\n        let lineOff = -20 * this.props.index;\n        let heights = { 'small': 14, 'median': 10, 'large': 8 };\n        let indicatorLength = { 'small': 420, 'median': 620, 'large': 820 };\n        return (\n            <>\n                <div\n                    className={'pile' + extraClassName}\n                    style={{ height: `${val * heights[this.props.size]}px`, background: color }}\n\n                >\n                    <p className='value'>{val}</p>\n                    {!this.props.finished && this.props.isPivot && <svg height=\"100\" width={indicatorLength[size] + 100} style={{ position: \"absolute\", display: \"flex\", marginTop: \"-31px\", marginLeft: `${lineOff}px` }}>\n                        <line x1=\"0\" y1=\"0\" x2={indicatorLength[size]} y2=\"0\" style={{ stroke: \"grey\", strokeWidth: \"3px\" }}></line>\n                    </svg>}\n                </div>\n\n            </>\n\n        );\n    }\n\n}","function swap(piles, a, b) {\n    const tempVal = piles[a];\n    piles[a] = piles[b];\n    piles[b] = tempVal;\n}\n\nfunction selectionSort(piles) {\n\n    let statesInOrder = [];\n    for (let i = 0; i < piles.length - 1; i++) {\n        let minId = i;\n        for (let j = i + 1; j < piles.length; j++) {\n            if (piles[j] < piles[minId]) {\n                minId = j;\n            }\n            const temp = { piles: piles.slice(), changing: [j] };\n            statesInOrder.push(temp);\n\n        }\n        swap(piles, minId, i);\n        const temp = { piles: piles.slice(), changing: [minId, i] };\n        statesInOrder.push(temp);\n    }\n    return statesInOrder;\n}\n\nfunction bubbleSort(piles) {\n    let statesInOrder = [];\n    let n = piles.length;\n    while (n > 1) {\n        let newN = 0;\n        for (let i = 1; i < n; i++) {\n            if (piles[i - 1] > piles[i]) {\n                swap(piles, i - 1, i);\n                newN = i;\n                const temp = { piles: piles.slice(), changing: [i] };\n                statesInOrder.push(temp);\n            }\n        }\n        n = newN;\n    }\n    return statesInOrder;\n}\n\nfunction insertionSort(piles) {\n    let statesInOrder = [];\n    for (let i = 1; i < piles.length; i++) {\n        for (let j = i; j > 0 && piles[j - 1] > piles[j]; j--) {\n            swap(piles, j, j - 1);\n            const temp = { piles: piles.slice(), changing: [j - 1] };\n            statesInOrder.push(temp);\n        }\n    }\n    console.log(statesInOrder);\n    return statesInOrder;\n}\n\nfunction mergeSort(piles) {\n    let statesInOrder = [];\n    mergeSortHelper(piles, 0, piles.length - 1, statesInOrder);\n    return statesInOrder;\n}\n\nfunction mergeSortHelper(piles, start, end, statesInOrder) {\n    if (start === end) return;\n    const mid = Math.floor((start + end) / 2);\n    mergeSortHelper(piles, start, mid, statesInOrder);\n    mergeSortHelper(piles, mid + 1, end, statesInOrder);\n    merge(piles, start, mid, end, statesInOrder);\n}\n\nfunction merge(piles, start, mid, end, statesInOrder) {\n    let k = start, i = start, j = mid + 1;\n    let pilesC = piles.slice();\n    while (i <= mid && j <= end) {\n        if (pilesC[i] <= pilesC[j]) {\n            piles[k++] = pilesC[i++];\n        }\n        else {\n            piles[k++] = pilesC[j++];\n        }\n        const temp = { piles: piles.slice(), changing: [i, j, k] };\n        statesInOrder.push(temp);\n\n    }\n    while (i <= mid) {\n        piles[k++] = pilesC[i++];\n        const temp = { piles: piles.slice(), changing: [i, k] };\n        statesInOrder.push(temp);\n    }\n    while (j <= end) {\n        piles[k++] = pilesC[j++];\n        const temp = { piles: piles.slice(), changing: [j, k] };\n        statesInOrder.push(temp);\n    }\n}\n\n\nfunction quickSort(piles) {\n    let statesInOrder = [];\n    quickSortHelper(piles, 0, piles.length - 1, statesInOrder);\n    return statesInOrder;\n}\n\nfunction quickSortHelper(piles, start, end, statesInOrder) {\n    if (start < end) {\n        let pivot = partition(piles, start, end, statesInOrder);\n        quickSortHelper(piles, start, pivot - 1, statesInOrder);\n        quickSortHelper(piles, pivot + 1, end, statesInOrder);\n    }\n}\n\nfunction partition(piles, start, end, statesInOrder) {\n    let pivot = piles[end];\n    let i = start - 1;\n    for (let j = start; j <= end - 1; j++) {\n        if (piles[j] < pivot) {\n            i++;\n            swap(piles, i, j);\n            const temp = { piles: piles.slice(), changing: [i, j], pivot: pivot};\n            if(pivot !== piles.length+4) statesInOrder.push(temp);\n        }\n    }\n    swap(piles, i + 1, end);\n    const temp = { piles: piles.slice(), changing: [i + 1, end], pivot: pivot};\n    if(pivot !== piles.length+4) statesInOrder.push(temp);\n    return i + 1;\n}\n\nexport { selectionSort, bubbleSort, insertionSort, mergeSort, quickSort };","import React, { Component } from 'react';\nimport './SortingVisualizer.css';\nimport Pile from './Pile/Pile';\nimport { selectionSort, bubbleSort, insertionSort, mergeSort, quickSort } from '../Algorithm/sortingAlgorithms';\n\nexport default class SortingVisualizer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            piles: [],\n            numPiles: 30,\n            finished: false,\n            maxPile: 80,\n            changingPiles: [],\n            pileDelayTimes: [30, 40, 40, 80, 80],\n            DelayTimesSizeBased: {'fast': [15, 20, 20, 40, 40], 'median': [30, 40, 40, 80, 80], 'slow': [60, 80, 80, 160, 160]},\n            colorSetIndex: getRandomInt(0, 3),\n            currentAlgorithm: -1,\n            descriptions: ['Selection Sort: repeatedly find the minimum element from the unsorted part and append it to the sorted part.', \n                           'Bubble Sort: repeatedly swap the adjacent elements if they are in wrong order.',\n                           'Insertion Sort: repeatedly place value from the unsorted part at the correct position in the sorted part(by finding the closest left-side element that is smaller than it).',\n                           'Merge Sort: divide the array into two halves, sort them recursively using merge sort, and then merge the two halves.',\n                           'Quick Sort: choose an element as pivot, arrange the array such that the elements smaller than pivot are on its left and others are on its right, sort the two halves recursively.'],\n            unsortedPiles: [],\n            speed: \"median\",\n            size: \"median\",\n            algorithms: ['Selection Sort', 'Bubble Sort', 'Insertion Sort', 'Merge Sort', 'Quick Sort'],\n            sortingAlgorithms: [selectionSort, bubbleSort, insertionSort, mergeSort, quickSort]\n        };\n        this.randomizePiles = this.randomizePiles.bind(this);\n        this.visualizeSorting = this.visualizeSorting.bind(this);\n        this.setAlgorithm = this.setAlgorithm.bind(this);\n        this.props.getFunctions(this.visualizeSorting, this.randomizePiles, this.setAlgorithm, this.state.algorithms);\n    }\n\n    componentDidMount() {\n        const piles = this.initializePiles();\n        this.setState({\n            piles: piles,\n        });\n        this.setState({ piles: piles, unsortedPiles: piles.slice() });\n    }\n\n    setAlgorithm(algoId) {\n        if (this.state.unsortedPiles !== []) {\n            this.setState({ finished: false, changingPiles: [], piles: this.state.unsortedPiles, pivot: -1 });\n        }\n        this.setState({ currentAlgorithm: algoId });\n    }\n\n    initializePiles() {\n        let piles = [];\n        for (let i = 0; i < this.state.numPiles; i++) {\n            piles.push(i + 5);\n        }\n\n        for (let i = 0; i < this.state.numPiles; i++) {\n            let j = getRandomInt(0, i);\n            let temp = piles[i];\n            piles[i] = piles[j];\n            piles[j] = temp;\n        }\n        piles.push(this.state.numPiles + 5);\n        return piles;\n    }\n\n    visualizeSorting() {\n        if (this.state.currentAlgorithm === -1) {\n            return;\n        }\n        if (this.state.rendering) return;\n        if (this.state.finished) {\n            this.state.finished = false;\n            this.state.changingPiles = [];\n            this.state.piles = this.state.unsortedPiles;\n        }\n        this.setState({ rendering: true });\n        this.props.setVisualizerRendering(true);\n        const piles = this.state.piles.slice();\n\n        const statesInOrder = this.state.sortingAlgorithms[this.state.currentAlgorithm](piles);\n        for (let i = 0; i < statesInOrder.length; i++) {\n            const { piles: state, changing: changingPiles, pivot } = statesInOrder[i];\n            setTimeout(() => {\n                this.setState({ piles: state, changingPiles: changingPiles, pivot: pivot });\n            }, this.state.pileDelayTimes[this.state.currentAlgorithm] * i);\n\n        }\n        setTimeout(() => {\n            this.setState({ rendering: false, finished: true });\n            this.props.setVisualizerRendering(false);\n        }, this.state.pileDelayTimes[this.state.currentAlgorithm] * statesInOrder.length);\n    }\n\n    randomizePiles() {\n        if (this.state.rendering) return;\n        this.setState({ finished: false, changingPiles: [], colorSetIndex: getRandomInt(0, 3) });\n        const piles = this.initializePiles();\n        this.setState({ piles: piles, unsortedPiles: piles.slice() });\n    }\n\n    setSpeed(speed) {\n        this.setState({ speed: speed, pileDelayTimes: this.state.DelayTimesSizeBased[speed] });\n    }\n\n    setSize(s) {\n        if(this.state.size === s) return;\n        let sizes = {\"small\": 20, \"median\": 30, \"large\": 40};\n        this.setState({ size: s, numPiles: sizes[s] });\n        this.state.numPiles = sizes[s];\n        const piles = this.initializePiles();\n        this.setState({ finished: false, changingPiles: [], piles: piles, unsortedPiles: piles.slice() });\n    }\n\n    render() {\n        const piles = this.state.piles;\n        let nSquare = <p>Time Complexity: θ(n&#178;)</p>\n        let nLogn = <p>Time Complexity: θ(n·log(n))</p>\n        return (\n            <>\n\n                <div className='piles' class=\"container\">\n                    {\n\n                        piles.map((pile, pileId) => {\n                            return (\n                                <Pile\n                                    dummy={pileId === this.state.numPiles}\n                                    finished={this.state.finished}\n                                    className='pile'\n                                    key={pileId}\n                                    index={pileId}\n                                    val={pile}\n                                    size={this.state.size}\n                                    isChanging={this.state.changingPiles.indexOf(pileId) !== -1}\n                                    isPivot={this.state.pivot === pile}\n                                    colorSetIndex={this.state.colorSetIndex}\n                                ></Pile>\n                            )\n                        })\n\n                    }\n\n                </div>\n                \n                <div class=\"d-flex\" style={{marginLeft: \"37%\", marginTop: \"10px\"}}>\n                    <div class=\"dropdown 1\">\n                        <button class=\"btn btn-outline-dark dropdown-toggle\" type=\"button\" disabled={this.state.rendering} id=\"dropdownMenuSpeed\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" style={{ marginRight: \"5px\", height: \"30px\", width: \"150px\" }}>\n                            <p style={{ \"margin-top\": \"-5px\" }}>{`Speed: ${this.state.speed}`}</p>\n                        </button>\n                        <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuSpeed\">\n                            <li>\n                                <button type=\"button\" class=\"btn btn-light navbtn\" style={{ height: \"30px\" }} onClick={() => this.setSpeed('slow')}><p style={{ \"margin-top\": \"-5px\" }}>{`slow`}</p></button>\n                                <button type=\"button\" class=\"btn btn-light navbtn\" style={{ height: \"30px\" }} onClick={() => this.setSpeed('median')}><p style={{ \"margin-top\": \"-5px\" }}>{`median`}</p></button>\n                                <button type=\"button\" class=\"btn btn-light navbtn\" style={{ height: \"30px\" }} onClick={() => this.setSpeed('fast')}><p style={{ \"margin-top\": \"-5px\" }}>{`fast`}</p></button>\n                            </li>\n                        </div>\n                    </div>\n                    <div class=\"dropdown 1\">\n                        <button class=\"btn btn-outline-dark dropdown-toggle\" type=\"button\" disabled={this.state.rendering} id=\"dropdownMenuSize\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" style={{ marginLeft: \"5px\", height: \"30px\", width: \"150px\" }}>\n                            <p style={{ \"margin-top\": \"-5px\" }}>{`Size: ${this.state.size}`}</p>\n                        </button>\n                        <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuSize\">\n                            <li>\n                                <button type=\"button\" class=\"btn btn-light navbtn\" style={{ height: \"30px\" }} onClick={() => this.setSize('small')}><p style={{ \"margin-top\": \"-5px\" }}>{`small`}</p></button>\n                                <button type=\"button\" class=\"btn btn-light navbtn\" style={{ height: \"30px\" }} onClick={() => this.setSize('median')}><p style={{ \"margin-top\": \"-5px\" }}>{`median`}</p></button>\n                                <button type=\"button\" class=\"btn btn-light navbtn\" style={{ height: \"30px\" }} onClick={() => this.setSize('large')}><p style={{ \"margin-top\": \"-5px\" }}>{`large`}</p></button>\n                            </li>\n                        </div>\n                    </div>\n                </div>\n                \n                <h6 class='algoDescription'>{this.state.currentAlgorithm === -1 ? \"Welcome to Sorting. Select an algorithm first.\" : this.state.descriptions[this.state.currentAlgorithm]}</h6>\n                <h5 class='algoComplexity' style={{marginTop: \"-4.5%\", color:\"rgb(90,90,90)\"}}>{\n                    this.state.currentAlgorithm === -1 ? \n                        \"\" : this.state.currentAlgorithm < 3 ?\n                            nSquare : nLogn\n                }</h5>\n            </>\n        );\n    }\n\n}\n\nfunction getRandomInt(min, range) {\n    return Math.floor(Math.random() * range) + min;\n}","class Perceptron {\n    constructor(n, alpha) {\n        this.weights = new Array(n);\n        \n        for (let i = 0; i < this.weights.length; i++) {\n            this.weights[i] = random(-1, 1);\n        }\n        this.alpha = alpha;\n    }\n\n    /**\n     * train the perceptron, adjust weights based on error\n     * @param {*} inputs \n     * @param {*} desired \n     */\n    train(inputs, desired) {\n        let guess = this.feedforward(inputs);\n        \n        let error = desired - guess;\n\n        for (let i = 0; i < this.weights.length; i++) {\n            this.weights[i] += this.alpha * error * inputs[i];\n        }\n    }\n\n    /**\n     * @param {*} inputs \n     * @returns the predicted result\n     */\n    feedforward(inputs) {\n        let sum = 0;\n        for (let i = 0; i < this.weights.length; i++) {\n            sum += inputs[i] * this.weights[i];\n        }\n        return this.activate(sum);\n        \n    }\n\n    activate(sum) {\n        return sum > 0 ? 1 : -1;\n    }\n\n    getWeights() {\n        return this.weights;\n    }\n}\n\nfunction random(min, max) {\n    return Math.random() * (max - min) + min;\n}\n\nexport {Perceptron, random};","import React, { Component } from 'react';\nimport { Stage, Layer, Line, Circle, Text } from 'react-konva';\nimport { Perceptron, random } from './Perceptron';\nimport './PtronVisualizer.css';\n\n/**\n * class definition of PtronVisualizer Class\n */\nexport default class PtronVisualizer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            training: new Array(1002),\n            rendering: false,\n            min: -1,\n            max: 1,\n            width: 500,\n            height: 500,\n            count: 0,\n            ptron: null,\n            xOff: 50,\n            yOff: 100,\n            M: 0.4,\n            B: 0.3,\n        }\n        this.resetVisualizer = this.resetVisualizer.bind(this);\n        this.startVisualizer = this.startVisualizer.bind(this);\n        this.props.getFunctions(this.startVisualizer, this.resetVisualizer);\n    }\n\n    /**\n     * @param {*} x \n     * @returns exact value of the origin function\n     */\n    f(x) {\n        return this.state.M * x + this.state.B;\n    }\n\n    /**\n     * map the value n from a range [as, ae] to [bs, be]\n     * @param {*} n \n     * @param {*} as \n     * @param {*} ae \n     * @param {*} bs \n     * @param {*} be \n     * @returns the mapped value\n     */\n    map(n, as, ae, bs, be) {\n        return ((n - as) / (ae - as)) * (be - bs) + bs;\n    }\n\n    initialize() {\n        this.state.ptron = new Perceptron(3, 0.006);\n        for (let i = 0; i < this.state.training.length; i++) {\n            let x = random(this.state.min, this.state.max);\n            let y = random(this.state.min, this.state.max);\n            let answer = 1;\n            if (y < this.f(x)) answer = -1;\n            this.state.training[i] = {\n                input: [x, y, 1],\n                output: answer\n            }\n        }\n    }\n\n    resetVisualizer() {\n        if (this.state.rendering) {\n            return;\n        }\n        this.setState({ count: 0 });\n        this.state.count = 0;\n    }\n\n    startVisualizer() {\n        this.setState({ rendering: true });\n        for (let i = 0; i < this.state.training.length - 1; i++) {\n            setTimeout(\n                () => {\n                    this.setState({ count: i });\n                    this.state.count = i;\n                }\n                , 25 * i);\n        }\n        setTimeout(() => {\n            this.setState({ rendering: false });\n        }, 25 * this.state.training.length)\n\n    }\n\n    /**\n     * render the scene using Konva\n     */\n    render() {\n        if (this.state.count === 0) {\n            this.initialize();\n        }\n        let min = this.state.min;\n        let max = this.state.max;\n        let ptron = this.state.ptron;\n        let x1 = this.map(min, min, max, 0, this.state.width);\n        let y1 = this.map(this.f(min), min, max, this.state.height, 0);\n        let x2 = this.map(max, min, max, 0, this.state.width);\n        let y2 = this.map(this.f(max), min, max, this.state.height, 0);\n\n        let weights = ptron.getWeights();\n        let xx1 = min;\n        let yy1 = (-weights[2] - weights[0] * xx1) / weights[1];\n        let xx2 = max;\n        let yy2 = (-weights[2] - weights[0] * xx2) / weights[1];\n\n        xx1 = this.map(xx1, min, max, 0, this.state.width);\n        yy1 = this.map(yy1, min, max, this.state.height, 0);\n        xx2 = this.map(xx2, min, max, 0, this.state.width);\n        yy2 = this.map(yy2, min, max, this.state.height, 0);\n        ptron.train(this.state.training[this.state.count].input, this.state.training[this.state.count].output);\n\n        let points = []\n\n        for (let i = 0; i < this.state.count; i++) {\n            let guess = ptron.feedforward(this.state.training[i].input);\n            let x = this.map(this.state.training[i].input[0], min, max, 0, this.state.width);\n            let y = this.map(this.state.training[i].input[1], min, max, this.state.height, 0);\n            if(i%4>0) points.push({ x: x, y: y, fill: guess < 0 });\n        }\n        \n        let aM = -weights[0] / weights[1];\n        let aB = -weights[2] / weights[1];\n        let eM = aM - this.state.M;\n        let eB = aB - this.state.B;\n        let textComponet;\n        if (this.state.count !== 0) {\n            textComponet = <><Text\n                x={550}\n                y={50}\n                text='Function Form: Y = M * X + B'\n                fontFamily='Calibri'\n                fill='black'\n                fontSize={25}\n            ></Text>\n                <Text\n                    x={550}\n                    y={80}\n                    text={`Original Function: M = ${this.state.M} B = ${this.state.B}`}\n                    fontFamily='Calibri'\n                    fill='black'\n                    fontSize={25}\n                ></Text>\n                <Text\n                    x={550}\n                    y={135}\n                    text={`Approximation:\\nM = ${aM}\\nB = ${aB}`}\n                    fontFamily='Calibri'\n                    fill='black'\n                    fontSize={25}\n                ></Text>\n                <Text\n                    x={550}\n                    y={240}\n                    text={`Error:\\nM: ${eM}\\nB:${eB}`}\n                    fontFamily='Calibri'\n                    fill='red'\n                    fontSize={25}\n                ></Text>\n                <Text\n                    x={550}\n                    y={340}\n                    text={`Count: ${this.state.count}`}\n                    fontFamily='Calibri'\n                    fill='grey'\n                    fontSize={25}\n                ></Text>\n                </>\n        }\n        else {\n            textComponet = <><Text\n                x={550}\n                y={50}\n                text=''\n                fontFamily='Calibri'\n                fill='black'\n                fontSize={25}\n            ></Text>\n                <Text\n                    x={550}\n                    y={80}\n                    text={`Original Function: M = ${this.state.M} B = ${this.state.B}`}\n                    fontFamily='Calibri'\n                    fill='black'\n                    fontSize={25}\n                ></Text>\n                <Text\n                    x={550}\n                    y={135}\n                    text={`Approximation:\\nM = ${aM}\\nB = ${aB}`}\n                    fontFamily='Calibri'\n                    fill='black'\n                    fontSize={25}\n                ></Text>\n                <Text\n                    x={550}\n                    y={240}\n                    text={`Error:\\nM: ${eM}\\nB:${eB}`}\n                    fontFamily='Calibri'\n                    fill='red'\n                    fontSize={25}\n                ></Text>\n                <Text\n                    x={550}\n                    y={340}\n                    text={`Count: ${this.state.count}`}\n                    fontFamily='Calibri'\n                    fill='grey'\n                    fontSize={25}\n                ></Text>\n                </>\n        }\n        let circles = points.map((point, pointId) => {\n            return (<Circle\n                key={pointId}\n                x={point.x + 0}\n                y={point.y + 0}\n                stroke={'black'}\n                radius={3}\n                opacity={0.7}\n                fill={point.fill ? 'black' : 'white'}\n            ></Circle>)}\n        )\n        this.state.all = (\n            <>\n                <Stage\n                    width={500 * 2}\n                    height={500 + 1}\n                    className='ptron-stage'\n                    id='stage'\n                >\n                    <Layer name=\"layer\" ref={ref => (this.state.layer = ref)}>\n                        <Line points={[0, 0, 500, 0]} stroke={'black'} ></Line>\n                        <Line points={[0, 0, 0, 0 + 500]} stroke={'black'}></Line>\n                        <Line points={[0, 0 + 500, 500 + 0, 0 + 500]} stroke={'black'} ></Line>\n                        <Line points={[500 + 0, 0, 500 + 0, 0 + 500]} stroke={'black'} strokeWidth={1}></Line>\n                        <Line\n                            points={[x1 + 0, 0 + y1, x2 + 0, 0 + y2]}\n                            stroke={'red'}\n                            strokeWidth={1}>\n                        </Line>\n                        <Line\n                            points={[xx1 + 0, 0 + yy1, xx2 + 0, 0 + yy2]}\n                            stroke={'blue'}\n                            strokeWidth={this.state.count > 0 ? 1 : 0}>\n                        </Line>\n                        {circles}\n                        {textComponet}\n                    </Layer>\n                </Stage>\n            </>\n        );\n        return this.state.all;\n    }\n\n}\n","/**\n * @param {*} p \n * @returns true at a probability of p\n */\nfunction flipCoin(p) {\n    return Math.random() < p;\n}\n\n/**\n * @param {*} a \n * @param {*} b \n * @returns Euclidean distance between a and b\n */\nfunction distance(a, b) {\n    let { x: ax, y: ay } = a;\n    let { x: bx, y: by } = b;\n    return Math.sqrt(((ax - bx) * (ax - bx) + (ay - by) * (ay - by)));\n}\n\nclass PongAgent {\n    constructor(speed, discount, epsilon, alpha) {\n        this.weights = {\n            \"min_dis_to_dot\": 0,\n            \"dis_to_panel\": 0,\n            \"num_dots\": 0,\n        };\n        this.discount = discount;\n        this.epsilon = epsilon;\n        this.alpha = alpha;\n        this.speed = speed;\n        this.featureList = [\"min_dis_to_dot\", \"dis_to_panel\", \"num_dots\"]\n    }\n\n    getMove(action) {\n        return action * this.speed;\n    }\n\n    minDisToDot(x, y, dots) {\n        let minDis = Infinity;\n        for (const dot of dots) {\n            const d = distance({ x: x, y: y }, dot);\n            if (d < minDis) {\n                minDis = d;\n            }\n        }\n        return minDis;\n    }\n\n    /**\n     * @param {*} state \n     * @param {*} action \n     * @returns the features at the state after taking the action\n     */\n    getFeatures(state, action) {\n        let { dots, x, y, px, vx, vy, terminal } = state;\n        px = px + this.getMove(action) + 50;\n        let features = {\n            \"min_dis_to_dot\": 0,\n            \"dis_to_panel\": 0,\n            \"num_dots\": 0,\n        };\n        features[\"min_dis_to_dot\"] = this.minDisToDot(x, y, dots) / Math.sqrt(600 * 600 + 550 * 550);\n        features[\"dis_to_panel\"] = Math.abs(x - px) / 600;\n        features[\"num_dots\"] = dots.length / 5;\n        return features;\n    }\n\n    /**\n     * @param {*} state \n     * @param {*} action \n     * @returns the Q value of the state after taking the action\n     */\n    getQ(state, action) {\n        if (!state) {\n            return 0;\n        }\n        let result = 0;\n        const features = this.getFeatures(state, action);\n        for (const feature of this.featureList) {\n            result += this.weights[feature] * features[feature];\n        }\n        return result;\n    }\n\n    /**\n     * update weights based on rewards.\n     * @param {*} state \n     * @param {*} action \n     * @param {*} nextState \n     * @param {*} reward \n     */\n    update(state, action, nextState, reward) {\n        if (!action) {\n            return;\n        }\n        const features = this.getFeatures(state, action)\n        const diff = reward + this.discount * this.getValue(nextState) - this.getQ(state, action);\n        \n        for (const feature of this.featureList) {\n            this.weights[feature] += this.alpha * diff * features[feature];\n        }\n    }\n\n    setWeights(weights) {\n        this.weights = weights;\n    }\n\n    actions() {\n        return [-1, 0, 1];\n    }\n\n    /**\n     * choose the \"best\" action at a probability of (1-epsilon) and a random action at a probability of (epsilon)\n     * @param {*} state \n     * @returns selected action\n     */\n    getAction(state) {\n        if (state[\"terminal\"] === true) return null;\n        const curActions = this.actions();\n\n        if (flipCoin(this.epsilon)) {\n            const action = curActions[randomSelect(curActions)];\n            return action;\n        }\n        else {\n            return this.getPolicy(state);\n        }\n\n    }\n\n    /**\n     * @param {*} state \n     * @returns the action with maximum utility\n     */\n    getPolicy(state) {\n        const curActions = this.actions();\n        let reAction = null;\n        let maxQ = -Infinity;\n        for (const a of curActions) {\n            if (this.getQ(state, a) > maxQ) {\n                maxQ = this.getQ(state, a);\n                reAction = a;\n            }\n            else if (this.getQ(state, a) === maxQ) {\n                reAction = randomSelect([a, reAction]);\n            }\n        }\n        return reAction;\n    }\n\n    getValue(state) {\n        return this.getQ(state, this.getPolicy(state));\n    }\n}\n\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction randomSelect(path) {\n    return randomInt(0, path.length - 1);\n}\n\nexport default PongAgent;","import React, { Component } from 'react';\nimport { Stage, Layer, Rect, Circle, Text } from 'react-konva';\nimport PongAgent from \"./PongAgent.js\";\nimport \"./PongVisualizer.css\";\n\n/**\n * definition of PongVisualizer Class\n */\nexport default class PongVisualizer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dots: [],\n            rendering: true,\n            width: 600,\n            height: 500,\n            x: null,\n            y: null,\n            r: 15,\n            vx: 0,\n            vy: 0,\n            ballSpeed: 3,\n            panelx: 0,\n            panely: 480,\n            panelSpeed: 3,\n            ballInitialized: false,\n            framecount: 0,\n            score: 0,\n            pressedLeft: false,\n            pressedRight: false,\n            finished: false,\n            gameCount: -1,\n            agent: new PongAgent(3, 0.9, 0.2, 0.2),\n            notStarted: true,\n        }\n\n        this.resetVisualizer = this.resetVisualizer.bind(this);\n        this.startVisualizer = this.startVisualizer.bind(this);\n\n        this.props.getFunctions(this.startVisualizer, this.resetVisualizer);\n\n    }\n\n    startVisualizer() {\n        this.setState({ notStarted: false });\n        this.setState({\n            rendering: false,\n            ballInitialized: false,\n            framecount: 0,\n            score: 0,\n            finished: false,\n            gameCount: 0,\n            agent: new PongAgent(3, 0.9, 0.2, 0.2),\n        });\n        this.componentDidMount();\n    }\n    resetVisualizer() {\n        this.setState({\n            rendering: false,\n            ballInitialized: false,\n            framecount: 0,\n            score: 0,\n            finished: false,\n            gameCount: 0,\n            notStarted: true,\n            agent: new PongAgent(3, 0.9, 0.2, 0.2),\n        });\n        this.componentDidMount();\n    }\n\n    componentDidMount() {\n        this.initialize();\n    }\n\n    initialize() {\n        let speed = this.state.ballSpeed;\n        let ox = randomInt(200, 480);\n        let oy = 200;\n        let ovx = [speed, -speed, 1.2 * speed, -1.2 * speed, 0.8 * speed, -0.8 * speed][randomInt(0, 5)];\n        let ovy = speed;\n        this.setState({\n            x: ox,\n            y: oy,\n            vx: ovx,\n            vy: ovy,\n            score: 0,\n            panelx: 0,\n            storedWeights: {},\n            dots: [{ x: 100, y: 100 }, { x: 200, y: 100 }, { x: 300, y: 100 }, { x: 400, y: 100 }, { x: 500, y: 100 }],\n            gameCount: this.state.gameCount + 1\n        });\n        this.state.x = ox;\n        this.state.y = oy;\n        this.state.vx = ovx;\n        this.state.vy = ovy;\n\n    }\n\n    getState() {\n        const { dots, x, y, panelx: px, vx, vy } = this.state;\n        return { dots: dots, x: x, y: y, px: px, vx: vx, vy: vy, terminal: this.state.score === 500 || this.state.finished };\n    }\n\n    updatePanel(action) {\n        if (this.state.finished) return;\n        this.movePanel(action);\n    }\n\n    updateBall() {\n        if (this.state.finished) return;\n        let { x, y, r, vx, vy, panelx } = this.state;\n        if (x === 0 && y === 0) return;\n        x = x + vx;\n        y = y + vy;\n        if (x > this.state.width - r - 5 || x < r + 5) {\n            vx = -vx;\n        }\n        if (y < r + 5) {\n            vy = -vy;\n        }\n        if (y > this.state.panely - r - 5 && y > this.state.panely - r + 5 && Math.abs(panelx - x + 50) < 50) {\n            vy = vy > 0 ? -vy : vy\n        }\n        else if (y > this.state.height - r && Math.abs(panelx - x + 50) > 50) {\n            this.setState({ score: this.state.score - 1000 });\n            this.initialize();\n            return false;\n        }\n        this.setState({\n            x: x,\n            y: y,\n            vx: vx,\n            vy: vy\n        });\n        this.state.x = x;\n        this.state.y = y;\n        this.state.vx = vx;\n        this.state.vy = vy;\n\n        return true;\n    }\n\n    updateDots() {\n        if (this.state.finished) return;\n        let score = this.state.score;\n        for (let i = 0; i < this.state.dots.length; i++) {\n            if (distance(this.state.dots[i], { x: this.state.x, y: this.state.y }) < this.state.r) {\n                this.state.dots.splice(i, 1);\n                score += 100;\n            }\n        }\n        this.setState({ score: score });\n    }\n\n    movePanel(action) {\n        if (this.state.finished) return;\n        let panelx = this.state.panelx;\n        let panelSpeed = this.state.panelSpeed;\n        if (action === -1) {\n            panelx = panelx - panelSpeed;\n        }\n        else if (action === 1) {\n            panelx = panelx + panelSpeed;\n        }\n        this.setState({ panelx: Math.min(this.state.width - 100, Math.max(0, panelx)) });\n\n    }\n\n    render() {\n        if (this.state.notStarted) {\n            return (\n                <>\n                <Stage\n                        width={this.state.width}\n                        height={this.state.height}\n                        className='pong-stage-notstarted'\n                        id='pong stage'\n                    >\n                        <Layer>\n                            <Rect width={this.state.width} height={this.state.height} stroke=\"black\" fill=\"black\"></Rect>\n                            <Text\n                                x={200}\n                                y={200}\n                                text={`Press`}\n                                fontFamily='Calibri'\n                                fill='white'\n                                fontSize={30}\n                            ></Text>\n                            <Text\n                                x={275}\n                                y={200}\n                                text={`go`}\n                                fontFamily='Calibri'\n                                fill={this.state.goMouseEnter ? 'rgb(142, 228, 213)':'white'}\n                                fontSize={30}\n                                onClick={\n                                    ()=>{this.setState({notStarted:false})}\n                                }\n                                onMouseEnter={\n                                    ()=>{this.setState({goMouseEnter:true})}\n                                }\n                                onMouseLeave={\n                                    ()=>{this.setState({goMouseEnter:false})}\n                                }\n                            ></Text>\n                            <Text\n                                x={315}\n                                y={200}\n                                text={`to start.`}\n                                fontFamily='Calibri'\n                                fill='white'\n                                fontSize={30}\n                            ></Text>\n                        </Layer>\n                        \n                    </Stage>\n                    <div class=\"pongDescription\">\n                        <h4 style={{ marginTop: \"0px\", marginLeft: \"650px\", \"text-align\": \"left\", fontFamily: \"monospace\" }}>\n                            <br /><br /><br /><br />\n                            This is a simple illustration of Reinforcement Learning, \"Apporixmate Q Learning\" specifically.<br/><br/>\n                            \n                            Our agent is given \"vision\" to current distance from the panel to the ball, distance from the\n                            ball to the nearest dot, and the number of dots remaining. The agent may try some random moves initially,\n                            and get \"rewards\"(positive score) and \"punishments\"(negative score) when eating the dots and dying.<br/><br/>\n\n                            After some trials, our agent would appear to know that bouncing the ball back would eventually lead it to \"rewards\", \n                            and manage to do that to finally win the game (eating all 5 dots).\n                        </h4>\n                    </div>\n                    </>\n            );\n        }\n        let { \"min_dis_to_dot\": w1,\n            \"dis_to_panel\": w2,\n            \"num_dots\": w3 } = this.state.agent.weights;\n        if (!this.notStarted && this.state.score !== 500 && !this.state.finished) {\n            setTimeout(() => {\n                let agent = this.state.agent;\n                if (this.state.gameCount > 10) agent.training = false;\n                const state = this.getState();\n                const action = agent.getAction(state);\n                const curScore = this.state.score;\n                const curGameCount = this.state.gameCount;\n\n                this.updateBall();\n                this.updateDots();\n                this.updatePanel(action);\n\n                const nextState = this.getState();\n                const reward = 10 + this.state.score - curScore + (-1000) * (this.state.gameCount - curGameCount);\n                agent.update(state, action, nextState, reward);\n\n                if (this.state.score === 500) {\n                    this.setState({ finished: true });\n                }\n                this.state.framecount += 1;\n\n            }, 10 * this.state.framecount);\n            if (!isNaN(w1) && !this.state.finished) {\n                this.state.storedWeights = {\n                    \"min_dis_to_dot\": w1,\n                    \"dis_to_panel\": w2,\n                    \"num_dots\": w3\n                };\n            }\n        }\n        const { x, y } = this.state;\n        const dots = this.state.dots;\n\n\n        if (this.state.finished) {\n            let { \"min_dis_to_dot\": w1,\n                \"dis_to_panel\": w2,\n                \"num_dots\": w3 } = this.state.storedWeights;\n            if (this.state.rendering) {\n                this.props.setVisualizerRendering(false);\n                this.state.rendering = false;\n            }\n            return (\n                <>\n                    <Stage\n                        width={this.state.width}\n                        height={this.state.height}\n                        className='pong-stage'\n                        id='pong stage'\n                    >\n                        <Layer>\n                            <Rect width={this.state.width} height={this.state.height} stroke=\"black\" fill=\"black\"></Rect>\n                            <Text\n                                x={250}\n                                y={200}\n                                text={`Win!`}\n                                fontFamily='Calibri'\n                                fill='white'\n                                fontSize={50}\n                            ></Text>\n                        </Layer>\n                    </Stage>\n                    <div>\n                        <h4 style={{ marginTop: \"0px\", marginLeft: \"700px\", \"text-align\": \"left\", fontFamily: \"monospace\" }}>\n                            <br /><br /><br /><br />\n                            {\"Your agent's weights:\"}<br />\n                            <div class=\"w-text\">\n                                <p >{`w1: min distance to dot:`}<br /><p class=\"num\">{w1}</p></p>\n                                <p>{`w2: distance to between the ball and the panel:`}<br /><p class=\"num\">{w2}</p></p>\n                                <p>{`w3: number of dots remaining:`}<br /><p class=\"num\">{w3}</p></p></div>\n                        </h4>\n                    </div></>\n            );\n        }\n\n        return (\n            <>\n                <div>\n                    <Stage\n                        width={this.state.width}\n                        height={this.state.height}\n                        className='pong-stage'\n                        id='pong stage'\n                    >\n                        <Layer>\n                            <Rect width={this.state.width} height={this.state.height} stroke=\"black\" fill=\"black\"></Rect>\n\n                            {dots.map((dot, dotId) => {\n                                return (\n                                    <Circle\n                                        key={dotId}\n                                        x={dot[\"x\"]}\n                                        y={dot[\"y\"]}\n                                        stroke={'white'}\n                                        fill={\"white\"}\n                                        radius={5}\n                                    ></Circle>)\n                            })\n                            }\n                            <Circle\n                                x={x}\n                                y={y}\n                                radius={this.state.r}\n                                stroke={'white'}\n                                fill={\"white\"}>\n                            </Circle>\n                            <Rect x={this.state.panelx} y={this.state.panely} width={100} height={10} stroke={'white'}\n                                fill={\"white\"}></Rect>\n                            <Text\n                                x={10}\n                                y={15}\n                                text={`Score: ${this.state.score}`}\n                                fontFamily='Calibri'\n                                fill='white'\n                                fontSize={25}\n                            ></Text>\n                        </Layer>\n                    </Stage></div>\n                <div>\n                    <h4 style={{\n                        marginTop: \"0px\", marginLeft: \"700px\", \"text-align\": \"left\", fontFamily: \"monospace\", fontSize: \"25px\"\n                    }}>\n                        <br /><br /><br /><br />\n                        {\"Your agent's weights:\"}<br />\n                        <div class=\"w-text\">\n                            <p >{`w1: min distance to dot:`}<br /><p class=\"num\">{w1}</p></p>\n                            <p>{`w2: distance to between the ball and the panel:`}<br /><p class=\"num\">{w2}</p></p>\n                            <p>{`w3: number of dots remaining:`}<br /><p class=\"num\">{w3}</p></p></div>\n                    </h4>\n                </div>\n            </>\n        )\n    }\n}\n\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction distance(a, b) {\n    let { x: ax, y: ay } = a;\n    let { x: bx, y: by } = b;\n    return Math.sqrt(((ax - bx) * (ax - bx) + (ay - by) * (ay - by)));\n}","import {checkWinner} from './ConnectFour';\n\nclass MinimaxAgent {\n    constructor(depth, humanPlayer) {\n        this.depth = depth;\n        if(humanPlayer === 0){\n            this.aiPiece = \"p2\";\n            this.humanPiece = \"p1\";\n        }\n        else{\n            this.aiPiece = \"p1\";\n            this.humanPiece = \"p2\";\n        }\n    }\n\n    /**\n     * @param {*} board \n     * @returns possible actions\n     */\n    getActions(board) {\n        let actions = [];\n        for (let index = 0; index < board.length; index++) {\n            if (board[index][1] === null) {\n                actions.push(index);\n            }\n        }\n        return actions;\n    }\n\n    /**\n     * choose the action with greatest utility based on Minimax algorithm\n     * @param {*} board \n     * @returns action with greatest utility\n     */\n    getAction(board) {\n        let actions = this.getActions(board);\n        let maxVal = -Infinity;\n        let maxValAction = null;\n        board = board.map((a) => a.slice());\n        for (const action of actions) {\n            const boardCopy = board.map((a) => a.slice());\n            let val = this.minimax(this.tryMove(action, boardCopy, this.aiPiece), false, -Infinity, Infinity, this.depth);\n            if (maxVal < val || maxValAction === null) {\n                maxVal = val;\n                maxValAction = action;\n            }\n            if (maxVal === val && action === 3){\n                maxValAction = action;\n            }\n            console.log(action, val);\n        }\n        return maxValAction;\n    }\n\n    tryMove(colId, board, val) {\n        let newCol = board[colId].reverse();\n        newCol[newCol.indexOf(null)] = val;\n        newCol.reverse();\n        return board;\n    }\n\n    count(four, tar) {\n        let count = 0;\n        for (const each of four) {\n            if (each === tar) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    /**\n     * score a four-pieces line\n     * @param {*} a \n     * @param {*} b \n     * @param {*} c \n     * @param {*} d \n     * @returns score\n     */\n    scoreFour(a, b, c, d) {\n        const four = [a, b, c, d];\n        const count1 = this.count(four, this.humanPiece);\n        const countN = this.count(four, null);\n        const count2 = this.count(four, this.aiPiece);\n        if(countN === 4 || (count1 > 0 && count2 > 0)) return 0;\n        if(count1 === 4){\n            return -10e22;\n        } \n        if(count2 === 4){\n            return 10e22;\n        } \n        if(count1 === 0){\n            return Math.pow(10*count2, count2);\n        }\n        if(count2 === 0){\n            return -Math.pow(10*count1, count1);\n        }\n        return 0;\n    }\n\n    /**\n     * evaluation function, getting score by checking each possible \"four in a row\"\n     * @param {*} board \n     * @returns score of the board\n     */\n    getScore(board) {\n        let score = 0;\n        for (let c = 0; c < 7; c++) {\n            for (let r = 1; r < 4; r++) {\n                let sc = this.scoreFour(board[c][r], board[c][r + 1], board[c][r + 2], board[c][r + 3]);\n                score += sc;\n            }\n        }\n\n\n        for (let c = 0; c < 4; c++) {\n            for (let r = 1; r < 7; r++) {\n                let sc = this.scoreFour(board[c][r], board[c + 1][r], board[c + 2][r], board[c + 3][r]);\n                score += sc;\n            }\n        }\n\n        for (let c = 0; c < 4; c++) {\n            for (let r = 1; r < 4; r++) {\n                let sc = this.scoreFour(board[c][r], board[c + 1][r + 1], board[c + 2][r + 2], board[c + 3][r + 3]);\n                score += sc;\n            }\n        }\n\n        for (let c = 3; c < 7; c++) {\n            for (let r = 1; r < 4; r++) {\n                let sc = this.scoreFour(board[c][r], board[c - 1][r + 1], board[c - 2][r + 2], board[c - 3][r + 3]);\n                score += sc;\n            }\n        }\n        return score;\n    }\n\n    /**\n     * Minimax algorithm with alpha-beta pruning\n     * @param {*} board \n     * @param {*} isMax \n     * @param {*} alpha \n     * @param {*} beta \n     * @param {*} depth\n     * @returns minimax utility \n     */\n    minimax(board, isMax, alpha, beta, depth) {\n        board = board.map((a) => a.slice());\n\n        if (checkWinner(board) || depth === 0) {\n            let score = this.getScore(board);\n            return score;\n        }\n\n        let actions = this.getActions(board);\n\n        if (isMax) {\n            let val = -Infinity;\n            for (const action of actions) {\n                const boardCopy = board.map((a) => a.slice());\n                val = Math.max(val, this.minimax(this.tryMove(action, boardCopy, this.aiPiece), false, alpha, beta, depth - 1));\n\n                if (val >= beta) {\n                    return val;\n                }\n                alpha = Math.max(alpha, val);\n            }\n            return val;\n        }\n        else {\n            let val = Infinity;\n            for (const action of actions) {\n                const boardCopy = board.map((a) => a.slice());\n                val = Math.min(val, this.minimax(this.tryMove(action, boardCopy, this.humanPiece), true, alpha, beta, depth - 1));\n                if (val <= alpha) {\n                    return val;\n                }\n                beta = Math.min(beta, val);\n            }\n            return val;\n        }\n    }\n}\n\nexport default MinimaxAgent;","import React, { Component } from 'react';\nimport MinimaxAgent from './MinimaxAgent';\nimport \"./ConnectFour.css\"\n\n/**\n * @param {*} props \n * @returns Picec Object\n */\nfunction Piece(props) {\n    return (\n        <div className={props.id === 0 ? \"virtual-piece\" : \"piece\"}>\n            <div\n                className={(props.id === 0 ? \"v\" : \"\") + `${props.val}` + (props.finished && props.val !== null ? \"finished\" : \"\")}\n            ></div>\n        </div>\n    );\n}\n\n/**\n * @param {*} props \n * @returns Col Object\n */\nfunction Col(props) {\n    return (\n        <div\n            className=\"col\" onClick={() => props.handleClick()} onMouseEnter={() => props.handleEnter()} onMouseLeave={() => props.handleLeave()}>\n            {[...Array(props.pieces.length)].map((x, y) => {\n                return <Piece key={y} val={props.pieces[y]} id={y} finished={props.finished}></Piece>\n            }\n            )}\n        </div >\n    );\n}\n\n/**\n * definition of ConnectFour Class\n */\nexport default class ConnectFour extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentPlayer: 0,\n            aiPlayer: 1,\n            humanPlayer: 0,\n            humanPiece: \"p1\",\n            board: new Array(7).fill(new Array(7).fill(null)),\n            lastBoards: [],\n            colors: [\"p1\", \"p2\"],\n            winner: null,\n            depth: 4,\n            minimaxAgent: new MinimaxAgent(4, 0),\n        };\n        this.reset = this.reset.bind(this);\n        this.props.getFunctions(() => { }, this.reset);\n    }\n\n    reset() {\n        this.setState({\n            currentPlayer: 0,\n            board: new Array(7).fill(new Array(7).fill(null)),\n            lastBoards: [],\n            colors: [\"p1\", \"p2\"],\n            winner: null,\n        });\n    }\n\n    undo() {\n        if (this.state.lastBoards.length) {\n            this.setState({\n                board: this.state.lastBoards.pop(),\n                currentPlayer: this.state.humanPlayer,\n            });\n\n        }\n    }\n\n    setStartingPlayer(player) {\n        if (player === \"human\") {\n            this.setState({\n                aiPlayer: 1,\n                humanPlayer: 0,\n                humanPiece: \"p1\",\n                minimaxAgent: new MinimaxAgent(this.state.depth, 0),\n            });\n        }\n        else {\n            this.setState({\n                aiPlayer: 0,\n                humanPlayer: 1,\n                humanPiece: \"p2\",\n                minimaxAgent: new MinimaxAgent(this.state.depth, 1),\n            });\n        }\n        this.reset();\n    }\n\n    setDepth(d) {\n        this.setState({ depth: d, minimaxAgent: new MinimaxAgent(d, this.state.humanPlayer) });\n    }\n\n    handleClick(colId) {\n        if (this.state.currentPlayer === this.state.aiPlayer) return;\n        if (!this.state.winner) {\n            this.state.lastBoards.push(this.state.board.map((a) => a.slice()));\n            this.move(colId);\n        }\n    }\n\n    AITakeMove() {\n        if (checkWinner(this.state.board) === null && this.state.currentPlayer === this.state.aiPlayer) {\n            const boardCopy = this.state.board.map((a) => a.slice());\n            const action = this.state.minimaxAgent.getAction(boardCopy);\n            this.move(action);\n        }\n    }\n\n    handleEnter(colId) {\n        if (this.state.currentPlayer === this.state.aiPlayer) return;\n        const boardCopy = this.state.board.map((a) => a.slice());\n        boardCopy[colId][0] = this.state.colors[this.state.currentPlayer];\n        for (let index = 0; index < boardCopy.length; index++) {\n            if (index !== colId) {\n                boardCopy[index][0] = null;\n            }\n        }\n        this.setState({\n            board: boardCopy\n        });\n    }\n\n    handleLeave(colId) {\n        const boardCopy = this.state.board.map((a) => a.slice());\n        boardCopy[colId][0] = null;\n        this.setState({\n            board: boardCopy\n        });\n    }\n\n    move(colId) {\n        const boardCopy = this.state.board.map((a) => a.slice());\n\n        if (boardCopy[colId].slice(1, 7).indexOf(null) >= 0) {\n            let newCol = boardCopy[colId].reverse();\n            newCol[newCol.indexOf(null)] = this.state.colors[this.state.currentPlayer];\n            newCol.reverse();\n\n            if (this.state.depth === 6) {\n                boardCopy[colId][0] = null;\n            }\n            else if (this.state.currentPlayer === this.state.humanPlayer) {\n                boardCopy[colId][0] = this.state.colors[this.state.currentPlayer];\n            }\n            this.setState({\n                currentPlayer: Math.abs(this.state.currentPlayer - 1),\n                board: boardCopy,\n            });\n        }\n\n    }\n\n    componentDidMount() {\n        if (this.state.aiPlayer === 0) {\n            this.AITakeMove();\n        }\n    }\n\n    componentDidUpdate() {\n        const boardCopy = this.state.board.map((a) => a.slice());\n        let winner = checkWinner(boardCopy);\n        if (this.state.winner !== winner) {\n\n            for (let index = 0; index < boardCopy.length; index++) {\n                boardCopy[index][0] = null;\n            }\n            this.setState({\n                winner: winner,\n                board: boardCopy,\n            })\n        }\n        setTimeout(() => this.AITakeMove(), 200);\n    }\n\n    render() {\n        let buttons =\n            <>\n                <button\n                    style={{ position: \"absolute\", marginTop: \"460px\", marginLeft: \"100px\", height: \"30px\", width: \"130px\" }}\n                    onClick={() => this.setStartingPlayer(this.state.aiPlayer === 1 ? \"ai\" : \"human\")}\n                    type=\"button\"\n                    class=\"btn btn-outline-dark\">\n                    <p style={{ \"margin-top\": \"-5px\" }}>{`offensive: ${this.state.aiPlayer === 1 ? \"you\" : \"ai\"}`}</p>\n                </button>\n\n                <button\n                    style={{ position: \"absolute\", marginTop: \"460px\", marginLeft: \"240px\", height: \"30px\", width: \"100px\" }}\n                    onClick={() => this.undo()}\n                    type=\"button\"\n                    class=\"btn btn-outline-dark\">\n                    <p style={{ \"margin-top\": \"-5px\" }}>undo</p>\n                </button>\n                <div class={\"dropdown\"}>\n                    <button class=\"btn btn-outline-dark dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" style={{ position: \"absolute\", marginTop: \"460px\", marginLeft: \"-130px\", height: \"30px\", width: \"130px\" }}>\n                        <p style={{ \"margin-top\": \"-5px\" }}>{`Depth: ${this.state.depth}`}</p>\n                    </button>\n                    <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n                        <li>\n                            <button type=\"button\" class=\"btn btn-light navbtn\" style={{ height: \"30px\" }} onClick={() => this.setDepth(2)}><p style={{ \"margin-top\": \"-5px\" }}>{`Depth: 2`}</p></button>\n                            <button type=\"button\" class=\"btn btn-light navbtn\" style={{ height: \"30px\" }} onClick={() => this.setDepth(4)}><p style={{ \"margin-top\": \"-5px\" }}>{`Depth: 4`}</p></button>\n                            <button type=\"button\" class=\"btn btn-light navbtn\" style={{ height: \"30px\" }} onClick={() => this.setDepth(6)}><p style={{ \"margin-top\": \"-5px\" }}>{`Depth: 6`}</p></button>\n                        </li>\n                    </div>\n                </div>\n            </>\n\n        if (this.state.winner) {\n            let cols = [...Array(this.state.board.length)].map((x, y) =>\n                <Col\n                    key={y}\n                    pieces={this.state.board[y]}\n                    handleClick={() => { }}\n                    handleEnter={() => { }}\n                    handleLeave={() => { }}\n                    finished={true}\n                ></Col>\n            );\n\n            return (\n                <div>\n                    <div className=\"game\">\n                        <div className=\"board\">\n                            <>\n                                <div className=\"col\"></div>\n                                {cols}</>\n                        </div>\n                        {buttons}\n                    </div>\n                    <h1 style={{ position: \"relative\", marginTop: \"-170px\" }}>{this.state.winner === \"tie\" ? \"Tie\" : `Winner: ${this.state.winner === this.state.humanPiece ? \"You\" : \"AI\"}`}</h1>\n                </div>\n\n            );\n        }\n\n        let cols = [...Array(this.state.board.length)].map((x, y) =>\n            <Col\n                key={y}\n                pieces={this.state.board[y]}\n                handleClick={() => this.handleClick(y)}\n                handleEnter={() => this.handleEnter(y)}\n                handleLeave={() => this.handleLeave(y)}\n                finished={false}\n            ></Col>\n        );\n\n        if (this.state.currentPlayer === this.state.aiPlayer) {\n            let loadingImg = document.getElementById(\"loadingImgT\");\n            if (loadingImg) loadingImg.className = 'loadingImgN';\n        }\n        else {\n            let loadingImg = document.getElementById(\"loadingImgT\");\n            if (loadingImg) loadingImg.className = 'loadingImgT';\n\n        }\n        return (\n            <div>\n                <div className=\"game\">\n                    <div className=\"board\">\n                        {cols}\n                    </div>\n\n                    {buttons}\n                    <img id=\"loadingImgT\" className=\"loadingImgT\" src=\"https://linkpicture.com/q/Double-Ring-1s-200px-2.gif\" height=\"100px\" width=\"100px\" style={{ marginLeft: \"10px\", position: \"absolute\", zIndex: 0 }} alt></img>;\n                    <div>\n                        <h5 class=\"connectFourDes\" style={{ position: \"absolute\", marginTop: \"160px\", marginLeft: \"30px\", textAlign: \"left\" }}>\n                            This is a chess game known as \"Connect Four\", which you<br />\n                            will need to connect four pieces to win (accept diagonals). <br />\n                            The game has \"gravity\", so wherever you put the pieces, <br />\n                            they would \"drop\" down to the bottom.<br /><br />\n                            You are competing with a \"Minimax\" AI with alpha-beta pruning.<br />\n                            Basically, it will search possible future states of the game<br />\n                            and choose the action that it think is best at the current state<br />\n                            each time. <br /><br />\n                            It is not a perfect player for this game, so try your best to<br />\n                            beat it by your \"humanity\"! <br /><br />\n                            (Depth 6 is quite slow, please wait patiently.)\n                    </h5>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n/**\n * @param {*} a \n * @param {*} b \n * @param {*} c \n * @param {*} d \n * @returns whether all four pieces are the same\n */\nfunction checkFour(a, b, c, d) {\n    return ((a !== null) && (a === b) && (a === c) && (a === d));\n}\n\n/**\n * @param {*} board \n * @returns the winner if there is a winner, null otherwise.\n */\nfunction checkWinner(board) {\n    for (let c = 0; c < 7; c++) {\n        for (let r = 1; r < 5; r++) {\n            if (checkFour(board[c][r], board[c][r + 1], board[c][r + 2], board[c][r + 3])) {\n                return board[c][r];\n            }\n        }\n    }\n\n\n    for (let c = 0; c < 4; c++) {\n        for (let r = 1; r < 7; r++) {\n            if (checkFour(board[c][r], board[c + 1][r], board[c + 2][r], board[c + 3][r])) {\n                return board[c][r];\n            }\n        }\n    }\n\n    for (let c = 0; c < 4; c++) {\n        for (let r = 1; r < 5; r++) {\n            if (checkFour(board[c][r], board[c + 1][r + 1], board[c + 2][r + 2], board[c + 3][r + 3]))\n                return board[c][r];\n        }\n    }\n\n    for (let c = 3; c < 7; c++) {\n        for (let r = 1; r < 5; r++) {\n            if (checkFour(board[c][r], board[c - 1][r + 1], board[c - 2][r + 2], board[c - 3][r + 3]))\n                return board[c][r];\n        }\n    }\n\n    for (let c = 0; c < 7; c++) {\n        if (board[c].slice(1, 7).indexOf(null) >= 0) {\n            return null;\n        }\n\n    }\n    return \"tie\";\n}\n\nexport { checkWinner };","import React, { Component } from 'react';\nimport \"./SnakeNode.css\";\n\nexport default class SnakeNode extends Component {\n    render() {\n        const {\n            row,\n            col,\n            type,\n        } = this.props;\n        return (\n            <div\n                id={`snakeNode-${row}-${col}`}\n                className={`snakeNode-${this.props.type}`}\n            >\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport SnakeNode from './SnakeNode/SnakeNode';\n\n// under construction\n\n\nexport default class NNSnakeVisualizer extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            grid: [],\n            numRows: 30,\n            numCols: 30,\n            snake: [{row: 15, col: 15, type: \"snake\"}, {row: 16, col: 15, type: \"snake\"}, {row: 17, col: 15, type: \"snake\"}],\n            direction: {dr: 1, dc: 0},\n            foodPos: null,\n            foodScore: 0,\n        }\n    }\n\n    randomFood(){\n        let randomRow = randomInt(this.state.numRows);\n        let randomCol = randomInt(this.state.numCols);\n        return {randomRow, randomCol};\n    }\n\n    setFoodClassName(row, col){\n        let nextFood = document.getElementById(`snakeNode-${row}-${col}`);\n        if(nextFood) nextFood.className = `snakeNode-food`;\n    }\n\n    componentDidMount(){\n        // node: null, snake, food\n        let grid = [];\n        \n        for(let row = 0; row < this.state.numRows; row++){\n            let line = [];\n            for(let col = 0; col < this.state.numCols; col++){\n                let n = {row: row, col: col, type: \"null\"};\n                line.push(n);\n            }\n            grid.push(line);\n        }\n        this.showSnake(grid, this.state.snake);\n        this.setState({grid: grid});\n    }\n\n    componentDidUpdate(){\n        let grid = this.state.grid.map((a) => a.slice());\n        let {snake, lastNode} = this.updateSnake();\n        let food;\n        let score = this.state.foodScore;\n        if(this.checkFoodEaten(snake)){\n            food = this.randomFood();\n            score++;\n            snake.push(lastNode);\n        }\n        this.update(grid, snake, food, score);\n    }\n\n    render(){\n        let grid = this.state.grid;\n        return(\n            <div className=\"snakeGrid\" style={{marginTop: \"5%\", marginLeft: \"-65%\"}}>\n                    {grid.map((row, rowId) => {\n                        return (\n                            <div key={rowId}>\n                                {row.map((node, nodeId) => {\n                                    \n                                    const { row, col, type } = node;\n                                    \n                                    return (\n                                        <SnakeNode\n                                            key={nodeId}\n                                            row={row}\n                                            col={col}\n                                            type={type}\n                                        ></SnakeNode>\n                                    )\n                                })\n                                }\n                            </div>\n                        );\n                    })\n                    }\n                </div>\n        );\n    }\n}\n\nfunction randomInt(num) {\n    return Math.floor(Math.random() * num);\n}","import React, { Component } from 'react';\nimport PtronVisualizer from './Perceptron/PtronVisualizer';\nimport PongVisualizer from './PongVisualizer/PongVisualizer';\nimport ConnectFour from './ConnectFourVisualizer/ConnectFour';\nimport NNSnakeVisualizer from './NNSnakeVisualizer/NNSnakeVisualizer';\nimport './AIVisualizer.css';\n\nexport default class AIVisualizer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentAlgorithm: -1,\n            algorithms: ['Perceptron', 'Approximate Q', 'Minimax'],\n            visualizeAI: () => { },\n            reset: () => { },\n        };\n        \n        this.state.reset = this.state.reset.bind(this.state);\n        this.state.visualizeAI = this.state.visualizeAI.bind(this.state);\n        this.getAIFunctions = this.getAIFunctions.bind(this);\n        this.setAlgorithm = this.setAlgorithm.bind(this);\n        this.props.getFunctions(() => { this.state.visualizeAI() }, () => { this.state.reset() }, this.setAlgorithm, this.state.algorithms);\n    }\n\n    componentDidMount(){\n        // combinatronics.com\n        this.newScript(\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/499416/TweenLite.min.js\");\n        this.newScript(\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/499416/EasePack.min.js\");\n        this.newScript(\"https://combinatronics.com/JasonFengGit/Visualizer/master/src/AIVisualizer/networkAnimation.js\");\n    }\n\n    getAIFunctions(run, reset) {\n        this.state.visualizeAI = () => {\n            run()\n        };\n        this.state.reset = () => {\n            reset();\n        }\n        this.setState({ visualizeAI: run });\n    }\n    setAlgorithm(algoId) {\n        this.setState({ currentAlgorithm: algoId });\n    }\n\n    newScript(url){\n        var script = document.createElement('script');\n        script.src = url;\n        document.body.appendChild(script);\n    }\n\n    render() {\n        let renderObj;\n        switch (this.state.currentAlgorithm) {\n            case -1:\n                renderObj = \n                <div>\n                    <div class=\"textcontainer\">\n                        <div class=\"typewriter\"><h1>Welcome to the Future.</h1></div>\n                    </div>\n                    <div id=\"large-header\" class=\"large-header\" style={{marginTop: \"-18em\"}}>\n                        <canvas id=\"demo-canvas\"></canvas>\n                    </div>\n                </div>\n                break;\n            case 0:\n                renderObj = <PtronVisualizer setVisualizerRendering={this.props.setVisualizerRendering} getFunctions={this.getAIFunctions}></PtronVisualizer>\n                break;\n            case 1:\n                renderObj = <PongVisualizer setVisualizerRendering={this.props.setVisualizerRendering} getFunctions={this.getAIFunctions}></PongVisualizer>\n                break;\n            case 2:\n                renderObj = <ConnectFour setVisualizerRendering={this.props.setVisualizerRendering} getFunctions={this.getAIFunctions}></ConnectFour>\n                break;\n            case 3:\n                renderObj = <NNSnakeVisualizer setVisualizerRendering={this.props.setVisualizerRendering} getFunctions={this.getAIFunctions}></NNSnakeVisualizer>\n                break;\n            default:\n                break;\n        }\n        return (\n            <div>{renderObj}</div>\n        );\n\n    }\n}","import React, { Component } from 'react';\nimport TextLoop from \"react-text-loop\";\nimport PathFindingVisualizer from './PathFindingVisualizer/PathFindingVisualizer';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './Visualizer.css'\nimport AIVisualizer from './AIVisualizer/AIVisualizer';\n\nexport default class Visualizer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            mode: 'main',\n            rendering: false,\n            algorithms: [],\n            currentAlgorithm: null,\n            goFunction: () => { },\n            resetFunction: () => { },\n            setAlgorithm: () => { },\n            sortingClicked: false,\n            pathClicked: false,\n            AIClicked: false,\n            aicount: 0,\n        };\n        this.getFunctions = this.getFunctions.bind(this);\n        this.changeRenderingState = this.changeRenderingState.bind(this);\n    }\n\n    changeRenderingState(rendering) {\n        this.setState({ rendering: rendering });\n    }\n\n    getFunctions(go, reset, setAlgo, algorithms) {\n        this.state.goFunction = go;\n        this.state.resetFunction = reset;\n        this.state.setAlgorithm = setAlgo;\n        this.state.algorithms = algorithms;\n        this.setState({ algorithms: algorithms });\n    }\n\n    render() {\n        let renderObj = null;\n        if (this.state.mode === 'pathfinding') {\n            renderObj = <PathFindingVisualizer setVisualizerRendering={this.changeRenderingState} getFunctions={this.getFunctions} />;\n        }\n        else if (this.state.mode === 'sorting') {\n            renderObj = <SortingVisualizer setVisualizerRendering={this.changeRenderingState} getFunctions={this.getFunctions} />;\n        }\n        else if (this.state.mode === 'ai') {\n            renderObj = <AIVisualizer count={this.state.aicount} setVisualizerRendering={this.changeRenderingState} getFunctions={this.getFunctions}></AIVisualizer>\n        }\n        else {\n            renderObj =\n                <div class=\"welbotron\">\n\n                    <div class=\"container welc\">\n\n                        <h1 class='welcome'>Hello, algorithms.\n                            <p class=\"quote\">\n                                <TextLoop interval={3800} springConfig={{ stiffness: 200 }} adjustingSpeed={300} >\n                                    <p class=\"quoteText\">\"An algorithm must be seen to be believed.\"</p>\n                                    <p class=\"quoteText\">\"Algorithms are central objects of study in Computer Science.\"</p>\n                                    <p class=\"quoteText\">\"Algorithms are apprehensible magics.\"</p>\n                                    <p class=\"quoteText\">\"An algorithm is like a recipe.\"</p>\n                                </TextLoop>\n                            </p>\n\n                            <p class=\"lead\">This website might help you understand algorithms better by visualizing them.</p>\n                            <p class=\"secondline lead\">Click on one of the categories below to visualize algorithms.</p>\n\n                        </h1>\n                        <a href='#' class='mainpage-b' onClick={() => {\n                            if (!this.state.rendering) {\n                                this.setState({ mode: 'pathfinding' });\n                                this.setState({ currentAlgorithm: null, pathClicked: true });\n                            }\n                        }} data-toggle={this.state.pathClicked ? \"\" : \"modal\"} data-target=\"#pathIntroModal\">\n                            <span></span>\n                            PATH FINDING\n                        </a>\n                        <a href='#' class='mainpage-b' onClick={() => {\n                            if (!this.state.rendering) {\n                                this.setState({ mode: 'sorting', currentAlgorithm: null, sortingClicked: true });\n                            }\n                        }} data-toggle={this.state.sortingClicked ? \"\" : \"modal\"} data-target=\"#sortingIntroModal\">\n                            <span></span>\n                            SORTING\n                        </a>\n                        <a href='#' class='mainpage-b' onClick={() => {\n                            if (!this.state.rendering) {\n                                this.setState({ mode: 'ai', currentAlgorithm: null, AIClicked: true });\n                            }\n                        }} data-toggle={this.state.AIClicked ? \"\" : \"modal\"} data-target=\"#aiIntroModal\">\n                            <span></span>\n                            ARTIFICIAL INTELLIGENCE\n                        </a>\n                    </div>\n                </div>\n        }\n        let invisibleOrNot = '';\n        if (this.state.mode === 'main') invisibleOrNot = ' invisible';\n        let algorithms = this.state.algorithms;\n        return (\n            <>\n                <nav class=\"navbar navbar-expand-lg navbar-light fixed-top bg-dark\">\n                    <button\n                        onClick={() => {\n                            if (!this.state.rendering) {\n                                this.setState({ mode: 'main' });\n                            }\n                        }}\n                        type=\"button\" class=\"btn btn-dark navbtn\"\n                        disabled={this.state.rendering}\n                    >Main</button>\n\n                    <button\n                        onClick={() => {\n                            if (!this.state.rendering) {\n                                this.setState({ mode: 'pathfinding', currentAlgorithm: null, pathClicked: true });\n                                this.state.setAlgorithm(-1);\n                            }\n                        }}\n                        type=\"button\" class=\"btn btn-dark navbtn\"\n                        data-toggle={this.state.pathClicked ? \"\" : \"modal\"} data-target=\"#pathIntroModal\"\n                        disabled={this.state.rendering}\n                    >Pathfinding</button>\n\n                    <button\n                        onClick={() => {\n                            if (!this.state.rendering) {\n                                this.setState({ mode: 'sorting', currentAlgorithm: null, sortingClicked: true });\n                                this.state.setAlgorithm(-1);\n                            }\n                        }}\n                        type=\"button\" class=\"btn btn-dark navbtn\"\n                        data-toggle={this.state.sortingClicked ? \"\" : \"modal\"} data-target=\"#sortingIntroModal\"\n                        disabled={this.state.rendering}\n                    >Sorting</button>\n\n                    <button\n                        onClick={() => {\n\n                            if (!this.state.rendering) {\n                                this.setState({ mode: 'ai', currentAlgorithm: null, AIClicked: true });\n                                this.state.setAlgorithm(-1);\n                            }\n                        }}\n                        type=\"button\" class=\"btn btn-dark navbtn\"\n                        data-toggle={this.state.AIClicked ? \"\" : \"modal\"} data-target=\"#aiIntroModal\"\n                        disabled={this.state.rendering}\n                    >AI</button>\n\n                    <div class={\"dropdown\" + invisibleOrNot}>\n                        <button class=\"btn btn-secondary dropdown-toggle navbtn\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" disabled={this.state.rendering}>\n                            {this.state.currentAlgorithm == null ? 'Algorithms' : this.state.currentAlgorithm}\n                        </button>\n                        <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n                            <li>\n                                {algorithms.map((algorithm, algoId) => {\n                                    return (<button type=\"button\" class=\"btn btn-light navbtn\" onClick={() => {\n                                        this.state.setAlgorithm(algoId);\n                                        this.setState({ currentAlgorithm: this.state.algorithms[algoId] });\n                                    }}>{algorithm}</button>);\n                                }\n                                )\n                                }\n                            </li>\n                        </div>\n                    </div>\n\n                    <div class={\"dropdown\" + invisibleOrNot}>\n                        <button class=\"btn btn-light dropdown-toggle navbtn\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" disabled={this.state.rendering}>\n                            Actions\n                        </button>\n                        <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n                            <li>\n                                <button type=\"button\" class=\"btn btn-light navbtn\" onClick={() => this.state.goFunction()} data-toggle={this.state.currentAlgorithm === null ? \"modal\" : \"\"} data-target=\"#setAlgoModal\" disabled={this.state.mode === \"ai\" && this.state.currentAlgorithm === \"Minimax\"}>Go!</button>\n                                <button type=\"button\" class=\"btn btn-light navbtn\" onClick={() => this.state.resetFunction()}>Reset</button>\n                            </li>\n                        </div>\n                    </div>\n                </nav>\n\n                <div class=\"modal fade\" id=\"setAlgoModal\" role=\"dialog\">\n                    <div class=\"modal-dialog\">\n                        <div class=\"modal-content\">\n\n                            <div class=\"modal-header\">\n                                <h5 class=\"modal-title\">No Algorithm Selected</h5>\n                                <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\n                            </div>\n\n                            <div class=\"modal-body-alert\">\n                                <p>Please select an algorithm first.</p>\n                            </div>\n                            <div class=\"modal-footer\">\n                                <button type=\"button\" class=\"btn btn-dark\" data-dismiss=\"modal\" style={{ width: '100px' }}>OK</button>\n                            </div>\n                        </div>\n\n                    </div>\n                </div>\n\n                <div class=\"modal fade\" id=\"pathIntroModal\" role=\"dialog\">\n                    <div class=\"modal-dialog\">\n                        <div class=\"modal-content intro\">\n\n                            <div class=\"modal-header\">\n                                <h5 class=\"modal-title\">Pathfinding</h5>\n                                <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\n                            </div>\n\n                            <div class=\"modal-body intro\">\n                                <p>\n                                    Pathfinding is generally the process of finding a route between two points. It is closely related to the shortest path problem in graph theory,\n                                    which examines how to identify the \"best\" paths valued by different criteria (Ex. distance, cost, time consumption).\n                                </p>\n                                <p>Pathfinding is also similar to Searching in some circumstances. For instance, we can use [breadth-first search] to find the shortest path in a grid world.</p>\n                                <p>\n                                    In our scenario, the paths are valued by the number of cells they passed from START:\n                                    <div class=\"simg\" width=\"20\" height=\"20\"></div>\n                                    to the TARGET:\n                                    <div class=\"fimg\" width=\"20\" height=\"20\"></div>\n                                    .\n                                </p>\n                                <p>You may drag the START and TARGET icons to change their positions, and click on the blank nodes to add Walls.</p>\n\n                                <p>Now please choose a sorting algorithm and visualize it!</p>\n                                <p class='tips'>(after choosing an algorithm, click on the [Actions] button.)</p><br />\n                                <p class='tips'>Note: there could be multiple \"best\" paths, so paths generated by different algorithms may not be consistent.</p>\n                            </div>\n                            <div class=\"modal-footer\">\n                                <button type=\"button\" class=\"btn btn-dark\" data-dismiss=\"modal\" style={{ width: '100px' }}>OK</button>\n                            </div>\n                        </div>\n\n                    </div>\n                </div>\n\n                <div class=\"modal fade\" id=\"sortingIntroModal\" role=\"dialog\">\n                    <div class=\"modal-dialog\">\n                        <div class=\"modal-content intro\">\n\n                            <div class=\"modal-header\">\n                                <h5 class=\"modal-title\">Sorting</h5>\n                                <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\n                            </div>\n\n                            <div class=\"modal-body intro\">\n                                <p>Sorting is a process of arranging an ordered sequence. It is a common operation in many applications.</p>\n                                <p>Common uses of sorted sequences are:\n                                    <div class='uses-list'>\n                                        <p>·lookup or search efficiently</p>\n                                        <p>·merge sequences efficiently</p>\n                                        <p>·process data in a defined order</p>\n                                    </div>\n                                Now please choose a sorting algorithm and visualize it!\n                                </p>\n                                <p class='tips'>(after choosing an algorithm, click on the [Actions] button.)</p>\n                            </div>\n                            <div class=\"modal-footer\">\n                                <button type=\"button\" class=\"btn btn-dark\" data-dismiss=\"modal\" style={{ width: '100px' }}>OK</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"modal fade\" id=\"aiIntroModal\" role=\"dialog\">\n                    <div class=\"modal-dialog\">\n                        <div class=\"modal-content intro\">\n\n                            <div class=\"modal-header\">\n                                <h5 class=\"modal-title\">Artificial Intelligence</h5>\n                                <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\n                            </div>\n\n                            <div class=\"modal-body intro\">\n                                <p>\n                                    Artificial intelligence (AI) is intelligence demonstrated by machines.\n                                    Leading textbooks define the field as the study of \"intelligent agents\":\n                                    any device that perceives its environment and takes actions that maximize its\n                                    chance of successfully achieving its goals.\n                                </p>\n                                <p>\n                                    In this category, you will experience with powerful AI algorithms\n                                    based on fundamental ideas. Please try to understand those ideas behind through the visualizations,\n                                    and I would try my best to demonstrate those principles.\n                                </p>\n                                <p> Now please choose an algorithm and begin your journey!</p>\n                            </div>\n                            <div class=\"modal-footer\">\n                                <button type=\"button\" class=\"btn btn-dark\" data-dismiss=\"modal\" style={{ width: '100px' }}>OK</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div>\n                    {renderObj}\n                </div>\n            </>\n        )\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport Visualizer from './Visualizer';\nimport 'bootstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/js/bootstrap.js';\nimport { BrowserRouter } from 'react-router-dom';\n\nfunction App() {\n\n  return (\n    <>\n      <meta charset=\"utf-8\" />\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\n\n      <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\" integrity=\"sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z\" crossorigin=\"anonymous\"></link>\n      <div className=\"App\">\n        <BrowserRouter basename={'lucasvoltera.github.io/'}>\n          <Visualizer></Visualizer>\n        </BrowserRouter>\n      </div >\n      <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\" integrity=\"sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj\" crossorigin=\"anonymous\"></script>\n      <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js\" integrity=\"sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN\" crossorigin=\"anonymous\"></script>\n      <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\" integrity=\"sha384-B4gt1jrGC7Jh4AgTPSdUtOBvfO8shuf57BaghqFfPlYxofvL8/KUEfYiJOMMV+rV\" crossorigin=\"anonymous\"></script>\n\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App class='app'></App>, document.getElementById('root'));\nserviceWorker.unregister();"],"sourceRoot":""}